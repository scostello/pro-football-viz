/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../gql-context"
import * as prisma from "@prisma/client"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "DateTime";
    time<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Time";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    time<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Time";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Coach: prisma.Coach;
  CollegeProgram: prisma.CollegeProgram;
  Executive: prisma.Executive;
  Person: prisma.Person;
  PersonName: prisma.PersonName;
  Player: prisma.Player;
  PlayerMeasurable: prisma.PlayerMeasurable;
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: any;
  DateTime: any;
  Time: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  Coach: { // field return type
    id: string; // String!
    person: NexusGenRootTypes['Person']; // Person!
  }
  CollegeProgram: { // field return type
    conference: string; // String!
    division: string; // String!
    id: number; // Int!
    name: string; // String!
  }
  Executive: { // field return type
    id: string; // String!
    person: NexusGenRootTypes['Person']; // Person!
  }
  Person: { // field return type
    dob: any; // DateTime!
    id: string; // String!
    name: NexusGenRootTypes['PersonName']; // PersonName!
  }
  PersonName: { // field return type
    first: string; // String!
    id: number; // Int!
    last: string; // String!
    middle: string | null; // String
    nickname: string | null; // String
    suffix: string | null; // String
    title: string | null; // String
  }
  Player: { // field return type
    college: NexusGenRootTypes['CollegeProgram']; // CollegeProgram!
    id: string; // String!
    measurable: NexusGenRootTypes['PlayerMeasurable']; // PlayerMeasurable!
    nflPlayerId: string; // String!
    person: NexusGenRootTypes['Person']; // Person!
  }
  PlayerMeasurable: { // field return type
    armLength: number | null; // Float
    bench: number | null; // Int
    broad: number | null; // Float
    cone: number | null; // Float
    forty: number | null; // Float
    handed: string | null; // String
    handSize: number | null; // Float
    height: number | null; // Int
    id: number; // Int!
    shuttle: number | null; // Float
    vertical: number | null; // Float
    weight: number | null; // Int
  }
  Query: { // field return type
    ok: boolean; // Boolean!
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Coach" | "CollegeProgram" | "Executive" | "Person" | "PersonName" | "Player" | "PlayerMeasurable" | "Query";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "DateTime" | "Float" | "ID" | "Int" | "String" | "Time";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}